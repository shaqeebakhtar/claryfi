datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  boards        Board[]
  comments      Comment[]
  replies       Reply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Board {
  id   String @id @default(cuid())
  name String
  slug String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  feedbacks Feedback[]
  tags      Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, userId])
}

model Feedback {
  id             String @id @default(cuid())
  title          String
  description    String @db.Text
  status         Status @default(PENDING)
  submitterName  String
  submitterEmail String

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  upvotes  Upvote[]
  comments Comment[]
  tags     TagOnPosts[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id    String @id @default(cuid())
  name  String
  color String

  board     Board        @relation(fields: [boardId], references: [id])
  boardId   String
  feedbacks TagOnPosts[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TagOnPosts {
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String
  createdAt  DateTime @default(now())

  @@id([feedbackId, tagId])
}

enum Status {
  PENDING
  APPROVED
  IN_PROGRESS
  DONE
  CANCELLED
}

model Upvote {
  id String @id @default(cuid())

  upvoterId String

  upvotedFeedback   Feedback @relation(fields: [upvotedFeedbackId], references: [id], onDelete: Cascade)
  upvotedFeedbackId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([upvoterId, upvotedFeedbackId])
  @@index([upvoterId])
  @@index([upvotedFeedbackId])
}

model Comment {
  id String @id @default(cuid())

  content String @db.Text
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  replies Reply[]

  feedbackId String
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id String @id @default(cuid())

  content String @db.Text
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  replyTo String

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
